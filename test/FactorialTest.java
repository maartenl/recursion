/*
 * Copyright (C) 2014 maartenl
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import static org.hamcrest.CoreMatchers.equalTo;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertThat;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import recursion.Recursion;

/**
 * Testing the factorial function in class Recursion.
 *
 * @author mrbear
 * @see http://www.mkyong.com/unittest/junit-4-tutorial-6-parameterized-test/
 * @see https://github.com/junit-team/junit/wiki/Parameterized-tests
 */
@RunWith(Parameterized.class)
public class FactorialTest
{

    @Parameters
    public static Collection<Object[]> data()
    {
        return Arrays.asList(new Object[][]
        {
            {
                BigDecimal.ZERO, BigDecimal.ONE
            },
            {
                BigDecimal.ONE, BigDecimal.ONE
            },
            {
                new BigDecimal("2"), new BigDecimal("2")
            },
            {
                new BigDecimal("3"), new BigDecimal("6")
            },
            {
                new BigDecimal("4"), new BigDecimal("24")
            },
            {
                new BigDecimal("5"), new BigDecimal("120")
            },
            {
                new BigDecimal("6"), new BigDecimal("720")
            },
            {
                new BigDecimal("7"), new BigDecimal("5040")
            },
            {
                new BigDecimal("8"), new BigDecimal("40320")
            },
            {
                new BigDecimal("9"), new BigDecimal("362880")
            },
            {
                new BigDecimal("10"), new BigDecimal("3628800")
            },
            {
                new BigDecimal("11"), new BigDecimal("39916800")
            },
            {
                new BigDecimal("12"), new BigDecimal("479001600")
            },
            {
                new BigDecimal("13"), new BigDecimal("6227020800")
            },
            {
                new BigDecimal("14"), new BigDecimal("87178291200")
            },
            {
                new BigDecimal("15"), new BigDecimal("1307674368000")
            },
            {
                new BigDecimal("16"), new BigDecimal("20922789888000")
            },
            {
                new BigDecimal("17"), new BigDecimal("355687428096000")
            },
            {
                new BigDecimal("18"), new BigDecimal("6402373705728000")
            },
            {
                new BigDecimal("19"), new BigDecimal("121645100408832000")
            },
            {
                new BigDecimal("20"), new BigDecimal("2432902008176640000")
            },
            {
                new BigDecimal("25"), new BigDecimal("15511210043330985984000000")
            },
            {
                new BigDecimal("50"), new BigDecimal("30414093201713378043612608166064768844377641568960512000000000000")
            },
            {
                new BigDecimal("70"), new BigDecimal("11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000")
            },
            {
                new BigDecimal("100"), new BigDecimal("93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000")
            },
            {
                new BigDecimal("450"), new BigDecimal("17333687331126326593447131461045793996778112652090510155692075095553330016834367506046750882904387106145811284518424097858618583806301650208347296181351667570171918700422280962237272230663528084038062312369342674135036610101508838220494970929739011636793766165023730853896403901590836144149594432684204513784716402303182604094683993315061302563918385303341510606761462420205820006936352095967417183191538725617509521380556781309195429800229273803342553558164591996298912368598547771179158461351340068905647127658164836377126303774923360078072307462008554355068361448126606281145760960499187813428397924840592504537849487425060488481036571447957046788635742936714615176219148469743102979949740714485104716169664052397392602848408694007408998901127492905171514473431386633392492040661522692303043813960541966093224243809225137268851717904303214058238447936111678568236973036238404626507890688000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
            },
            {
                new BigDecimal("1000"), new BigDecimal("402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
            },
            {
                new BigDecimal("3249"), new BigDecimal("")
            },
            {
                new BigDecimal("10000"), new BigDecimal("2")
            },
            {
                new BigDecimal("25206"), new BigDecimal("0100000")
            },
            {
                new BigDecimal("100000"), new BigDecimal("6573")
            },
            {
                new BigDecimal("205023"), new BigDecimal("000004")
            },
            {
                new BigDecimal("1000000"), new BigDecimal("565708")
            },
            {
                new BigDecimal("1723508"), new BigDecimal("01")
            },
            {
                new BigDecimal("2000000"), new BigDecimal("3474")
            },
            {
                new BigDecimal("10000000"), new BigDecimal("7059")
            },
            {
                new BigDecimal("14842907"), new BigDecimal("0000")
            }
        });
    }

    private final BigDecimal number;

    private final BigDecimal expectedFactorial;

    public FactorialTest(BigDecimal number, BigDecimal expectedFactorial)
    {
        this.number = number;
        this.expectedFactorial = expectedFactorial;
    }

    @BeforeClass
    public static void setUpClass()
    {
    }

    @AfterClass
    public static void tearDownClass()
    {
    }

    @Before
    public void setUp()
    {
    }

    @After
    public void tearDown()
    {
    }

    @Test
    public void factorialTest()
    {
        final BigDecimal factorial = Recursion.factorial(number);
        System.out.println("Factorial of Number " + number + " is " + factorial);
        assertThat("factorial of " + number + " should be " + expectedFactorial + " but was " + factorial, Recursion.factorial(number), equalTo(expectedFactorial));
    }
}
